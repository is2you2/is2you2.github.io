

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://is2you2.github.io/</id>
  <title>그림또따</title>
  <subtitle>오픈소스에 기대어 이것 저것 해봅니다</subtitle>
  <updated>2023-12-26T19:18:06+09:00</updated>
  <author>
    <name>그림또따</name>
    <uri>https://is2you2.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://is2you2.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko"
    href="https://is2you2.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator>
  <rights> © 2023 그림또따 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>p5js로 시작하기 [9]</title>
    <link href="https://is2you2.github.io/posts/start-with-p5js-9/" rel="alternate" type="text/html" title="p5js로 시작하기 [9]" />
    <published>2023-12-26T19:15:00+09:00</published>
  
    <updated>2023-12-26T19:15:00+09:00</updated>
  
    <id>https://is2you2.github.io/posts/start-with-p5js-9/</id>
    <content src="https://is2you2.github.io/posts/start-with-p5js-9/" />
    <author>
      <name>그림또따</name>
    </author>

  
    
    <category term="정보글" />
    
    <category term="개발" />
    
  

  
    <summary>
      





      
  이 글에는 이해를 돕기 위한 거짓말이 조금 포함되어 있습니다.


반복문으로 변수 관리하기
이제 반복문을 쓸 수 있게 되었으니, 여러 변수를 한번에 다루는 방법만 알아내면 되는데요. 아쉽게도 지금과 같은 방법으로는 변수를 한번에 관리할 수 없습니다.
var ball_0;
var ball_1;
var ball_2;

...


  이런 식으로 변수를 생성하고 for()문을 사용하면 되지 않나요?


네! 개념적으로 완벽하게 접근하셨는데 ball_n의 방식으로 변수를 불러오는 것은 컴퓨터 구조상 어렵습니다. 대신 그 작업에 적합한 변수 종류가 있습니다.

배열(Array)


우리는 편하게 쓰고 있지만 사실 변수에는 문자, 숫자 등의 다양한 종류가 있다고 했죠?
그러한 종류 중 하나로 배열이 있습니다...
    </summary>
  

  </entry>

  
  <entry>
    <title>p5js로 시작하기 [8]</title>
    <link href="https://is2you2.github.io/posts/start-with-p5js-8/" rel="alternate" type="text/html" title="p5js로 시작하기 [8]" />
    <published>2023-12-25T03:20:00+09:00</published>
  
    <updated>2023-12-25T03:20:00+09:00</updated>
  
    <id>https://is2you2.github.io/posts/start-with-p5js-8/</id>
    <content src="https://is2you2.github.io/posts/start-with-p5js-8/" />
    <author>
      <name>그림또따</name>
    </author>

  
    
    <category term="정보글" />
    
    <category term="개발" />
    
  

  
    <summary>
      





      
  이 글에는 이해를 돕기 위한 거짓말이 조금 포함되어 있습니다.


개체 생성 반복하기
대표적인 반복문으로 for()문이 있습니다.

기본 모양새는 이렇게 되어있습니다.
// 기본 구성
for (let i = 0; i &amp;lt; 100; i++) {
  // 반복 행동 코드 블럭
  console.log(i, '번째 반복 시행.');
}

이렇게 구성되어 있구요,
for (&amp;lt;변수 선언&amp;gt;; &amp;lt;조건문&amp;gt;; &amp;lt;변형&amp;gt;) {
  &amp;lt;코드 블럭&amp;gt;
}

이 순서로 동작합니다.
for ( (0) ; (1) ; (3) ) {
  (2)
}


구성 따라가기
위 예시에 있는 for()문을 따라가면

  
    변수 i를 선언하고, i = 0 으로 설정합니다.
    i(0) &amp;...
    </summary>
  

  </entry>

  
  <entry>
    <title>p5js로 시작하기 [7]</title>
    <link href="https://is2you2.github.io/posts/start-with-p5js-7/" rel="alternate" type="text/html" title="p5js로 시작하기 [7]" />
    <published>2023-12-24T16:22:00+09:00</published>
  
    <updated>2023-12-24T16:22:00+09:00</updated>
  
    <id>https://is2you2.github.io/posts/start-with-p5js-7/</id>
    <content src="https://is2you2.github.io/posts/start-with-p5js-7/" />
    <author>
      <name>그림또따</name>
    </author>

  
    
    <category term="정보글" />
    
    <category term="개발" />
    
  

  
    <summary>
      





      
  이 글에는 이해를 돕기 위한 거짓말이 조금 포함되어 있습니다.


이미 준비된 구조
우리는 공 튀기기를 만들면서 공 하나에 필요한 거의 대부분의 구조를 만들었습니다. 그 구조를 개량하고 class로 만들어서 관리하면 될 것 같네요 👍
일단 필요한 정보들을 추려서 class를 만들어봅시다.

function setup() {
  createCanvas(400, 400);
  ball = new Ball(30, 30)
}

var ball;

function draw() {
  background(220);
  ball.update();
}

class Ball {
  // 공마다 시작 위치가 달라야하니 위치는 직접 받습니다.
  constructor(_pos_x, _pos_y) {
    // ja...
    </summary>
  

  </entry>

  
  <entry>
    <title>클래스란 무엇인가 [2]</title>
    <link href="https://is2you2.github.io/posts/what-is-class-2/" rel="alternate" type="text/html" title="클래스란 무엇인가 [2]" />
    <published>2023-12-23T02:33:00+09:00</published>
  
    <updated>2023-12-23T02:33:00+09:00</updated>
  
    <id>https://is2you2.github.io/posts/what-is-class-2/</id>
    <content src="https://is2you2.github.io/posts/what-is-class-2/" />
    <author>
      <name>그림또따</name>
    </author>

  
    
    <category term="정보글" />
    
    <category term="개발" />
    
  

  
    <summary>
      





      빵은 같아도 내용물은 달라야해
모든 메뉴에는 빵이 들어가지만 모든 메뉴에 치즈가 들어가진 않습니다.
우리는 보통 메뉴 이름을 통해서 내용물을 구분하니까 그렇게 동작하도록 해야겠어요.

class Burger {
    constructor(name: String) {
        // 버거를 제작할 때 일단 바닥 빵을 둡니다.
        switch(name) {
            case 'cheese':
                // 치즈버거는 치즈를 올릴 겁니다.
                break;
        }
        this.end_of_burger();
    }

    end_of_burger() {
        // 버거를 마무리할 때 맨 위에 빵으로 덮습...
    </summary>
  

  </entry>

  
  <entry>
    <title>클래스란 무엇인가 [1]</title>
    <link href="https://is2you2.github.io/posts/what-is-class/" rel="alternate" type="text/html" title="클래스란 무엇인가 [1]" />
    <published>2023-12-22T05:09:00+09:00</published>
  
    <updated>2023-12-22T05:09:00+09:00</updated>
  
    <id>https://is2you2.github.io/posts/what-is-class/</id>
    <content src="https://is2you2.github.io/posts/what-is-class/" />
    <author>
      <name>그림또따</name>
    </author>

  
    
    <category term="정보글" />
    
    <category term="개발" />
    
  

  
    <summary>
      





      
  이 글에는 이해를 돕기 위한 거짓말이 조금 포함되어 있습니다.


코드로 컴퓨터에게 일 시키기
여러분은 햄버거집을 운영하는 사장입니다.
지금껏 여러분이 코딩이라고, 컴퓨터에게 어떤 일을 시키던 것들은 버거집에서 알바생이 지켜야할 규칙들을 상세하게 적어내려가는 일이었고, 그 일을 처리하는 알바생은 컴퓨터인데 이녀석은 매우 멍청하지만 매우 정직합니다. 다르게 말하자면 상식은 전혀 통하지 않지만 하라는 일은 정확하게 해냅니다.

이것이 오늘 코딩을 비유하는 방식입니다.

효율적인 햄버거 레시피 관리

클래스(class)는 ‘어떻게 하면 모든 햄버거 레시피를 쉽게 관리할 수 있을까?’라는 생각에서 출발한 개념으로


  레시피를 보관할 때는 공간을 적게 차지하고
  공통된 부분이 있는 것들을 관리할 때 ...
    </summary>
  

  </entry>

</feed>


